@page "/Empleados/Administracion/Consultas"
@using Reciplas.Models;
@inject NotificationService NotificationService 
@inject NavigationManager NavigationManager
@inherits OwningComponentBase<Usuario> 

<TituloPrincipal TextoPrincipal="Administracion" TextoSecundario="Consultas" />
<br>

<div class="rz-p-12">
    <RadzenColumn Size="12" SizeMD="6">
    <RadzenAccordion>
        <Items>
            <RadzenAccordionItem Text="Consultas" Icon="account_balance_wallet">
                
                    <RadzenTabs TabPosition="@tabPosition" RenderMode="TabRenderMode.Client" >
                        <Tabs>
                            <RadzenTabsItem Text="Compras">
                                <RadzenDataList PageSize="6" WrapItems="true" AllowPaging="true" Data="@orders" TItem="Order">
                                    <Template Context="order">
                                        <RadzenCard Style="width: 250px;" Class="rz-border-radius-3">
                                            <RadzenRow Gap="0.5rem">
                                                <RadzenColumn Size="8" Class="rz-text-truncate">
                                                    <RadzenBadge BadgeStyle="BadgeStyle.Light" Text=@($"{order.OrderID}") Class="rz-mr-1" IsPill="true" />
                                                    <RadzenText TextStyle="TextStyle.Caption" Class="rz-mb-0">@(order.ShipName)</RadzenText>
                                                </RadzenColumn>
                                                <RadzenColumn Size="4" Class="rz-text-align-right">
                                                    <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Shade="Shade.Lighter" Text=@($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", order.Freight)}") IsPill="true" />
                                                </RadzenColumn>
                                            </RadzenRow>
                                            <hr style="border: none; background-color: rgba(0,0,0,.08); height: 1px; margin: 1rem 0;" />
                                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
                                                <RadzenStack Gap="0">
                                                    
                                                    <RadzenText TextStyle="TextStyle.Body2" Class="rz-mb-0">@order.ShipAddress</RadzenText>
                                                    <RadzenText TextStyle="TextStyle.Caption" Class="rz-mb-0">@(order.ShipCity)</RadzenText>
                                                </RadzenStack>
                                            </RadzenStack>
                                        </RadzenCard>
                                    </Template>
                                </RadzenDataList>
                            </RadzenTabsItem>
                            <RadzenTabsItem Text="Ventas">
                                <RadzenDataGrid ColumnWidth="150px" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" Data="@pedidos" TItem="Pedidos">
                                    <Columns> 
                                        <RadzenDataGridColumn TItem="Pedidos" Property="NumPedido" Title="N° de Pedido" /> 
                                        <RadzenDataGridColumn TItem="Pedidos" Property="Descripcion" Title="Descripcion" />
                                        <RadzenDataGridColumn TItem="Pedidos" Property="IDEmpleado" Title="ID Empleado" />
                                        <RadzenDataGridColumn TItem="Pedidos" Property="CodVenta" Title="Cod de Venta" />
                                        <RadzenDataGridColumn TItem="Pedidos" Property="Fecha" Title="Fecha"/>
                                    </Columns>
                                </RadzenDataGrid>
                            </RadzenTabsItem> 
                        </Tabs>
                    </RadzenTabs>
            </RadzenAccordionItem>
            <RadzenAccordionItem Text="Reportes" Icon="account_box">
                Details for Employees
            </RadzenAccordionItem>
            <RadzenAccordionItem Text="Deudores" Icon="accessibility">
                Details for Customers
            </RadzenAccordionItem>
            <RadzenAccordionItem Text="Usuario" Icon="accessibility">
                <RadzenButton Click="@(args => NavigationManager.NavigateTo("/Empleados/Ventas/ClienteFormulario"))"  Text="Nuevo" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Secondary" Style="margin-left: 15px"/>
                <RadzenButton Style="margin-left: 15px" Click="@(args => NavigationManager.NavigateTo("/Empleados/Ventas/ventasClientes"))"  Text="Modificar" Icon="check_circle" ButtonStyle="ButtonStyle.Success"  />
            </RadzenAccordionItem>
        </Items>
    </RadzenAccordion></RadzenColumn>
</div>

 

@code { 
    IEnumerable<Order> orders;
    IEnumerable<Pedidos> pedidos; 

    TabPosition tabPosition = TabPosition.Top; 
      DateTime? Fecha = DateTime.Now;
     private int _count;
    protected override Task OnInitializedAsync()
    {
        List<Order> ordenes = new List<Order>();
        var person1 = new Order {ShipName="Cartón", ShipAddress="Corrugado", ShipCity="Para envio a deposito", Freight="no", OrderID=2840};
        var person2 = new Order {ShipName="Bolsa de Plástico",ShipAddress="De supermercado renovable", ShipCity="Falta recibir", Freight="Si", OrderID=1050};
        var person3 = new Order {ShipName="Metal",ShipAddress="Para deposito", ShipCity="Falta recibir", Freight="si", OrderID=5451};
        var person4 = new Order {ShipName="Vidrio",ShipAddress="Para espejos de colores", ShipCity="Para envio a deposito", Freight="no", OrderID=1625};
        var person5 = new Order {ShipName="Botellas",ShipAddress="De shampoo y acondicionador", ShipCity="Para envio a deposito", Freight="no", OrderID=885};
        var person6 = new Order {ShipName="Tapas de Plástico",ShipAddress="De gaseosa", ShipCity="Falta recibir", Freight="si", OrderID=1533};
        var person7 = new Order {ShipName="Envases de Yogurt",ShipAddress="Para individuales", ShipCity="Falta recibir", Freight="si", OrderID=1960};
 
        ordenes.Add(person1);
        ordenes.Add(person2); 
        ordenes.Add(person3);
        ordenes.Add(person4);
        ordenes.Add(person5);
        ordenes.Add(person6);
        ordenes.Add(person7);

        orders = ordenes;
        _count = ordenes.Count;




        List<Pedidos> empleados = new List<Pedidos>();
        var emp1 = new Pedidos {IDEmpleado=1234, CodVenta=0001, Descripcion="cosas importantes", NumPedido=2840};
        var emp2 = new Pedidos {IDEmpleado=0025, CodVenta=0002, Descripcion="same", NumPedido=1050};
        var emp3 = new Pedidos {IDEmpleado=5524, CodVenta=0003, Descripcion="como", NumPedido=5451};
        var emp4 = new Pedidos {IDEmpleado=0004, CodVenta=0004, Descripcion="como", NumPedido=1625};
        var emp5 = new Pedidos {IDEmpleado=0078, CodVenta=0005, Descripcion="como", NumPedido=885};
        var emp6 = new Pedidos {IDEmpleado=7865, CodVenta=0006, Descripcion="como", NumPedido=1533};
        var emp7 = new Pedidos {IDEmpleado=4520, CodVenta=0006, Descripcion="como", NumPedido=1960};
 
        empleados.Add(emp1);
        empleados.Add(emp2); 
        empleados.Add(emp3);
        empleados.Add(emp4);
        empleados.Add(emp5);
        empleados.Add(emp6);
        empleados.Add(emp7);

        pedidos = empleados;
        _count = empleados.Count;

 
        return base.OnInitializedAsync();
    }
 
}